"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const debug_1 = require("debug");
class DebugLoggerImpl {
    constructor(namespace, additionalContext) {
        this.setupLogs(namespace);
        this.additionalContextFn = additionalContext;
    }
    debug(message, ...context) {
        this.logWrapper('debug', message, context);
    }
    error(message, ...context) {
        this.logWrapper('error', message, context);
    }
    info(message, ...context) {
        this.logWrapper('info', message, context);
    }
    warn(message, ...context) {
        this.logWrapper('warn', message, context);
    }
    setupLogs(namespace) {
        this.loggers = {
            debug: debug_1.debug(`${namespace}:debug`),
            info: debug_1.debug(`${namespace}:info`),
            warn: debug_1.debug(`${namespace}:warn`),
            error: debug_1.debug(`${namespace}:error`)
        };
        Object.keys(this.loggers).forEach(key => {
            const item = this.loggers[key];
            item.log = console.log.bind(console);
        });
    }
    logWrapper(level, message, context) {
        if (this.additionalContextFn) {
            const loggingContext = this.additionalContextFn();
            if (loggingContext) {
                context.push(loggingContext);
            }
        }
        this.loggers[level].apply(null, [message].concat(context));
    }
}
const logger = new DebugLoggerImpl(process.env.APP_NAME || 'sfcc-product-search-proxy');
function getLogger() {
    return logger;
}
exports.getLogger = getLogger;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVidWctbG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZGVidWctbG9nZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsaUNBQThCO0FBUzlCLE1BQU0sZUFBZTtJQUluQixZQUFZLFNBQWlCLEVBQUUsaUJBQTRCO1FBQ3pELElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDMUIsSUFBSSxDQUFDLG1CQUFtQixHQUFHLGlCQUFpQixDQUFDO0lBQy9DLENBQUM7SUFFTSxLQUFLLENBQUMsT0FBZSxFQUFFLEdBQUcsT0FBYztRQUM3QyxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDN0MsQ0FBQztJQUVNLEtBQUssQ0FBQyxPQUFlLEVBQUUsR0FBRyxPQUFjO1FBQzdDLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBRU0sSUFBSSxDQUFDLE9BQWUsRUFBRSxHQUFHLE9BQWM7UUFDNUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFFTSxJQUFJLENBQUMsT0FBZSxFQUFFLEdBQUcsT0FBYztRQUM1QyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUVPLFNBQVMsQ0FBQyxTQUFpQjtRQUVqQyxJQUFJLENBQUMsT0FBTyxHQUFHO1lBQ2IsS0FBSyxFQUFFLGFBQUssQ0FBQyxHQUFJLFNBQVUsUUFBUSxDQUFDO1lBQ3BDLElBQUksRUFBRSxhQUFLLENBQUMsR0FBSSxTQUFVLE9BQU8sQ0FBQztZQUNsQyxJQUFJLEVBQUUsYUFBSyxDQUFDLEdBQUksU0FBVSxPQUFPLENBQUM7WUFDbEMsS0FBSyxFQUFFLGFBQUssQ0FBQyxHQUFJLFNBQVUsUUFBUSxDQUFDO1NBQ3JDLENBQUM7UUFFRixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDdEMsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBRSxHQUFHLENBQUUsQ0FBQztZQUNqQyxJQUFJLENBQUMsR0FBRyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3ZDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVPLFVBQVUsQ0FBQyxLQUEwQixFQUFFLE9BQWUsRUFBRSxPQUFjO1FBQzVFLElBQUksSUFBSSxDQUFDLG1CQUFtQixFQUFFO1lBQzVCLE1BQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO1lBQ2xELElBQUksY0FBYyxFQUFFO2dCQUNsQixPQUFPLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO2FBQzlCO1NBQ0Y7UUFDRCxJQUFJLENBQUMsT0FBTyxDQUFFLEtBQUssQ0FBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBRSxPQUFPLENBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUNqRSxDQUFDO0NBQ0Y7QUFFRCxNQUFNLE1BQU0sR0FBRyxJQUFJLGVBQWUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsSUFBSSwyQkFBMkIsQ0FBQyxDQUFDO0FBRXhGLFNBQWdCLFNBQVM7SUFDdkIsT0FBTyxNQUFNLENBQUM7QUFDaEIsQ0FBQztBQUZELDhCQUVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGVidWdMb2dnZXIgfSBmcm9tICcuL2RlYnVnLWxvZ2dlci5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgZGVidWcgfSBmcm9tICdkZWJ1Zyc7XG5cbmludGVyZmFjZSBTdXBwb3J0TGV2ZWxzIHtcbiAgZGVidWc6IGRlYnVnLklEZWJ1Z2dlcjtcbiAgaW5mbzogZGVidWcuSURlYnVnZ2VyO1xuICB3YXJuOiBkZWJ1Zy5JRGVidWdnZXI7XG4gIGVycm9yOiBkZWJ1Zy5JRGVidWdnZXI7XG59XG5cbmNsYXNzIERlYnVnTG9nZ2VySW1wbCBpbXBsZW1lbnRzIERlYnVnTG9nZ2VyIHtcbiAgcHJpdmF0ZSBsb2dnZXJzOiBhbnk7XG4gIHByaXZhdGUgYWRkaXRpb25hbENvbnRleHRGbj86ICgpID0+IHt9O1xuXG4gIGNvbnN0cnVjdG9yKG5hbWVzcGFjZTogc3RyaW5nLCBhZGRpdGlvbmFsQ29udGV4dD86ICgpID0+IHt9KSB7XG4gICAgdGhpcy5zZXR1cExvZ3MobmFtZXNwYWNlKTtcbiAgICB0aGlzLmFkZGl0aW9uYWxDb250ZXh0Rm4gPSBhZGRpdGlvbmFsQ29udGV4dDtcbiAgfVxuXG4gIHB1YmxpYyBkZWJ1ZyhtZXNzYWdlOiBzdHJpbmcsIC4uLmNvbnRleHQ6IGFueVtdKSB7XG4gICAgdGhpcy5sb2dXcmFwcGVyKCdkZWJ1ZycsIG1lc3NhZ2UsIGNvbnRleHQpO1xuICB9XG5cbiAgcHVibGljIGVycm9yKG1lc3NhZ2U6IHN0cmluZywgLi4uY29udGV4dDogYW55W10pIHtcbiAgICB0aGlzLmxvZ1dyYXBwZXIoJ2Vycm9yJywgbWVzc2FnZSwgY29udGV4dCk7XG4gIH1cblxuICBwdWJsaWMgaW5mbyhtZXNzYWdlOiBzdHJpbmcsIC4uLmNvbnRleHQ6IGFueVtdKSB7XG4gICAgdGhpcy5sb2dXcmFwcGVyKCdpbmZvJywgbWVzc2FnZSwgY29udGV4dCk7XG4gIH1cblxuICBwdWJsaWMgd2FybihtZXNzYWdlOiBzdHJpbmcsIC4uLmNvbnRleHQ6IGFueVtdKSB7XG4gICAgdGhpcy5sb2dXcmFwcGVyKCd3YXJuJywgbWVzc2FnZSwgY29udGV4dCk7XG4gIH1cblxuICBwcml2YXRlIHNldHVwTG9ncyhuYW1lc3BhY2U6IHN0cmluZykge1xuXG4gICAgdGhpcy5sb2dnZXJzID0ge1xuICAgICAgZGVidWc6IGRlYnVnKGAkeyBuYW1lc3BhY2UgfTpkZWJ1Z2ApLFxuICAgICAgaW5mbzogZGVidWcoYCR7IG5hbWVzcGFjZSB9OmluZm9gKSxcbiAgICAgIHdhcm46IGRlYnVnKGAkeyBuYW1lc3BhY2UgfTp3YXJuYCksXG4gICAgICBlcnJvcjogZGVidWcoYCR7IG5hbWVzcGFjZSB9OmVycm9yYClcbiAgICB9O1xuXG4gICAgT2JqZWN0LmtleXModGhpcy5sb2dnZXJzKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICBjb25zdCBpdGVtID0gdGhpcy5sb2dnZXJzWyBrZXkgXTtcbiAgICAgIGl0ZW0ubG9nID0gY29uc29sZS5sb2cuYmluZChjb25zb2xlKTtcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgbG9nV3JhcHBlcihsZXZlbDoga2V5b2YgU3VwcG9ydExldmVscywgbWVzc2FnZTogc3RyaW5nLCBjb250ZXh0OiBhbnlbXSkge1xuICAgIGlmICh0aGlzLmFkZGl0aW9uYWxDb250ZXh0Rm4pIHtcbiAgICAgIGNvbnN0IGxvZ2dpbmdDb250ZXh0ID0gdGhpcy5hZGRpdGlvbmFsQ29udGV4dEZuKCk7XG4gICAgICBpZiAobG9nZ2luZ0NvbnRleHQpIHtcbiAgICAgICAgY29udGV4dC5wdXNoKGxvZ2dpbmdDb250ZXh0KTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5sb2dnZXJzWyBsZXZlbCBdLmFwcGx5KG51bGwsIFsgbWVzc2FnZSBdLmNvbmNhdChjb250ZXh0KSk7XG4gIH1cbn1cblxuY29uc3QgbG9nZ2VyID0gbmV3IERlYnVnTG9nZ2VySW1wbChwcm9jZXNzLmVudi5BUFBfTkFNRSB8fCAnc2ZjYy1wcm9kdWN0LXNlYXJjaC1wcm94eScpO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0TG9nZ2VyKCk6IERlYnVnTG9nZ2VyIHtcbiAgcmV0dXJuIGxvZ2dlcjtcbn1cbiJdfQ==