"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk = require("@aws-cdk/core");
const apigateway = require("@aws-cdk/aws-apigateway");
const lambda = require("@aws-cdk/aws-lambda");
const iam = require("@aws-cdk/aws-iam");
const certificate = require("@aws-cdk/aws-certificatemanager");
const sha256File = require('sha256-file');
const stackPrefix = process.env.STACK_NAME || 'GenericSFCCProxyServer';
const domainName = process.env.DOMAIN_NAME;
const certARN = process.env.CERTIFICATE_ARN;
class SFCCProductSearchServerProxyStack extends cdk.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        const handler = new lambda.Function(this, stackPrefix + 'Handler', {
            runtime: lambda.Runtime.NODEJS_8_10,
            code: lambda.AssetCode.asset('resources'),
            description: `Generated on ${new Date().toISOString()}`,
            handler: 'lambda-express-wrapper.handler',
            role: new iam.Role(this, 'AllowLambdaServiceToAssumeRole', {
                assumedBy: new iam.CompositePrincipal(new iam.ServicePrincipal('lambda.amazonaws.com'), new iam.ServicePrincipal('edgelambda.amazonaws.com')),
                managedPolicies: [iam.ManagedPolicy.fromAwsManagedPolicyName('service-role/AWSLambdaBasicExecutionRole')],
            })
        });
        const sha = sha256File('./package.json');
        handler.addVersion(sha);
        const api = new apigateway.RestApi(this, 'sfcc-proxy-api', {
            domainName: {
                domainName: domainName,
                certificate: certificate.Certificate.fromCertificateArn(this, 'sfcc-proxy-certificate', certARN)
            },
            restApiName: 'sfcc-proxy-api',
            description: 'Proxy server for deploying sfcc ui extension.',
        });
        const proxyserver = new apigateway.LambdaIntegration(handler, {
            requestTemplates: { 'application/json': '{ "statusCode": "200" }' }
        });
        api.root.addMethod('GET', proxyserver);
        api.root.addMethod('POST', proxyserver);
    }
}
exports.SFCCProductSearchServerProxyStack = SFCCProductSearchServerProxyStack;
const app = new cdk.App();
console.log(certARN);
console.log(`STACK_NAME: "${stackPrefix}"`);
new SFCCProductSearchServerProxyStack(app, stackPrefix + 'Service');
app.synth();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHFDQUFzQztBQUN0QyxzREFBdUQ7QUFDdkQsOENBQStDO0FBQy9DLHdDQUF5QztBQUN6QywrREFBZ0U7QUFHaEUsTUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQzFDLE1BQU0sV0FBVyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxJQUFJLHdCQUF3QixDQUFDO0FBQ3ZFLE1BQU0sVUFBVSxHQUFXLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBWSxDQUFDO0FBQ3BELE1BQU0sT0FBTyxHQUFXLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZ0IsQ0FBQztBQUVyRCxNQUFhLGlDQUFrQyxTQUFRLEdBQUcsQ0FBQyxLQUFLO0lBQzlELFlBQVksS0FBYyxFQUFFLEVBQVUsRUFBRSxLQUFzQjtRQUM1RCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUV4QixNQUFNLE9BQU8sR0FBRyxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLFdBQVcsR0FBRyxTQUFTLEVBQUU7WUFDakUsT0FBTyxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVztZQUNuQyxJQUFJLEVBQUUsTUFBTSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDO1lBQ3pDLFdBQVcsRUFBRSxnQkFBaUIsSUFBSSxJQUFJLEVBQUUsQ0FBQyxXQUFXLEVBQUcsRUFBRTtZQUN6RCxPQUFPLEVBQUUsZ0NBQWdDO1lBQ3pDLElBQUksRUFBRSxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLGdDQUFnQyxFQUFFO2dCQUN6RCxTQUFTLEVBQUUsSUFBSSxHQUFHLENBQUMsa0JBQWtCLENBQ2pDLElBQUksR0FBRyxDQUFDLGdCQUFnQixDQUFDLHNCQUFzQixDQUFDLEVBQ2hELElBQUksR0FBRyxDQUFDLGdCQUFnQixDQUFDLDBCQUEwQixDQUFDLENBQ3ZEO2dCQUNELGVBQWUsRUFBRSxDQUFFLEdBQUcsQ0FBQyxhQUFhLENBQUMsd0JBQXdCLENBQUMsMENBQTBDLENBQUMsQ0FBRTthQUM1RyxDQUFDO1NBQ0gsQ0FBQyxDQUFDO1FBRUgsTUFBTSxHQUFHLEdBQUcsVUFBVSxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDekMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUd4QixNQUFNLEdBQUcsR0FBRyxJQUFJLFVBQVUsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLGdCQUFnQixFQUFFO1lBQ3pELFVBQVUsRUFBRTtnQkFDVixVQUFVLEVBQUUsVUFBVTtnQkFDdEIsV0FBVyxFQUFFLFdBQVcsQ0FBQyxXQUFXLENBQUMsa0JBQWtCLENBQUMsSUFBSSxFQUFFLHdCQUF3QixFQUFFLE9BQU8sQ0FBQzthQUNqRztZQUNELFdBQVcsRUFBRSxnQkFBZ0I7WUFDN0IsV0FBVyxFQUFFLCtDQUErQztTQUM3RCxDQUFDLENBQUM7UUFFSCxNQUFNLFdBQVcsR0FBRyxJQUFJLFVBQVUsQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLEVBQUU7WUFDNUQsZ0JBQWdCLEVBQUUsRUFBQyxrQkFBa0IsRUFBRSx5QkFBeUIsRUFBQztTQUNsRSxDQUFDLENBQUM7UUFFSCxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDdkMsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBQzFDLENBQUM7Q0FDRjtBQXRDRCw4RUFzQ0M7QUFFRCxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUMxQixPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFBO0FBQ3BCLE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0JBQWlCLFdBQVksR0FBRyxDQUFDLENBQUM7QUFDOUMsSUFBSSxpQ0FBaUMsQ0FBQyxHQUFHLEVBQUUsV0FBVyxHQUFHLFNBQVMsQ0FBQyxDQUFDO0FBQ3BFLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjZGsgPSByZXF1aXJlKCdAYXdzLWNkay9jb3JlJyk7XG5pbXBvcnQgYXBpZ2F0ZXdheSA9IHJlcXVpcmUoJ0Bhd3MtY2RrL2F3cy1hcGlnYXRld2F5Jyk7XG5pbXBvcnQgbGFtYmRhID0gcmVxdWlyZSgnQGF3cy1jZGsvYXdzLWxhbWJkYScpO1xuaW1wb3J0IGlhbSA9IHJlcXVpcmUoJ0Bhd3MtY2RrL2F3cy1pYW0nKTtcbmltcG9ydCBjZXJ0aWZpY2F0ZSA9IHJlcXVpcmUoJ0Bhd3MtY2RrL2F3cy1jZXJ0aWZpY2F0ZW1hbmFnZXInKTtcblxuXG5jb25zdCBzaGEyNTZGaWxlID0gcmVxdWlyZSgnc2hhMjU2LWZpbGUnKTtcbmNvbnN0IHN0YWNrUHJlZml4ID0gcHJvY2Vzcy5lbnYuU1RBQ0tfTkFNRSB8fCAnR2VuZXJpY1NGQ0NQcm94eVNlcnZlcic7XG5jb25zdCBkb21haW5OYW1lOiBzdHJpbmcgPSBwcm9jZXNzLmVudi5ET01BSU5fTkFNRSE7XG5jb25zdCBjZXJ0QVJOOiBzdHJpbmcgPSBwcm9jZXNzLmVudi5DRVJUSUZJQ0FURV9BUk4hO1xuXG5leHBvcnQgY2xhc3MgU0ZDQ1Byb2R1Y3RTZWFyY2hTZXJ2ZXJQcm94eVN0YWNrIGV4dGVuZHMgY2RrLlN0YWNrIHtcbiAgY29uc3RydWN0b3Ioc2NvcGU6IGNkay5BcHAsIGlkOiBzdHJpbmcsIHByb3BzPzogY2RrLlN0YWNrUHJvcHMpIHtcbiAgICBzdXBlcihzY29wZSwgaWQsIHByb3BzKTtcblxuICAgIGNvbnN0IGhhbmRsZXIgPSBuZXcgbGFtYmRhLkZ1bmN0aW9uKHRoaXMsIHN0YWNrUHJlZml4ICsgJ0hhbmRsZXInLCB7XG4gICAgICBydW50aW1lOiBsYW1iZGEuUnVudGltZS5OT0RFSlNfOF8xMCxcbiAgICAgIGNvZGU6IGxhbWJkYS5Bc3NldENvZGUuYXNzZXQoJ3Jlc291cmNlcycpLFxuICAgICAgZGVzY3JpcHRpb246IGBHZW5lcmF0ZWQgb24gJHsgbmV3IERhdGUoKS50b0lTT1N0cmluZygpIH1gLFxuICAgICAgaGFuZGxlcjogJ2xhbWJkYS1leHByZXNzLXdyYXBwZXIuaGFuZGxlcicsXG4gICAgICByb2xlOiBuZXcgaWFtLlJvbGUodGhpcywgJ0FsbG93TGFtYmRhU2VydmljZVRvQXNzdW1lUm9sZScsIHtcbiAgICAgICAgYXNzdW1lZEJ5OiBuZXcgaWFtLkNvbXBvc2l0ZVByaW5jaXBhbChcbiAgICAgICAgICAgIG5ldyBpYW0uU2VydmljZVByaW5jaXBhbCgnbGFtYmRhLmFtYXpvbmF3cy5jb20nKSxcbiAgICAgICAgICAgIG5ldyBpYW0uU2VydmljZVByaW5jaXBhbCgnZWRnZWxhbWJkYS5hbWF6b25hd3MuY29tJyksXG4gICAgICAgICksXG4gICAgICAgIG1hbmFnZWRQb2xpY2llczogWyBpYW0uTWFuYWdlZFBvbGljeS5mcm9tQXdzTWFuYWdlZFBvbGljeU5hbWUoJ3NlcnZpY2Utcm9sZS9BV1NMYW1iZGFCYXNpY0V4ZWN1dGlvblJvbGUnKSBdLFxuICAgICAgfSlcbiAgICB9KTtcblxuICAgIGNvbnN0IHNoYSA9IHNoYTI1NkZpbGUoJy4vcGFja2FnZS5qc29uJyk7XG4gICAgaGFuZGxlci5hZGRWZXJzaW9uKHNoYSk7XG5cblxuICAgIGNvbnN0IGFwaSA9IG5ldyBhcGlnYXRld2F5LlJlc3RBcGkodGhpcywgJ3NmY2MtcHJveHktYXBpJywge1xuICAgICAgZG9tYWluTmFtZToge1xuICAgICAgICBkb21haW5OYW1lOiBkb21haW5OYW1lLFxuICAgICAgICBjZXJ0aWZpY2F0ZTogY2VydGlmaWNhdGUuQ2VydGlmaWNhdGUuZnJvbUNlcnRpZmljYXRlQXJuKHRoaXMsICdzZmNjLXByb3h5LWNlcnRpZmljYXRlJywgY2VydEFSTilcbiAgICAgIH0sXG4gICAgICByZXN0QXBpTmFtZTogJ3NmY2MtcHJveHktYXBpJyxcbiAgICAgIGRlc2NyaXB0aW9uOiAnUHJveHkgc2VydmVyIGZvciBkZXBsb3lpbmcgc2ZjYyB1aSBleHRlbnNpb24uJyxcbiAgICB9KTtcblxuICAgIGNvbnN0IHByb3h5c2VydmVyID0gbmV3IGFwaWdhdGV3YXkuTGFtYmRhSW50ZWdyYXRpb24oaGFuZGxlciwge1xuICAgICAgcmVxdWVzdFRlbXBsYXRlczogeydhcHBsaWNhdGlvbi9qc29uJzogJ3sgXCJzdGF0dXNDb2RlXCI6IFwiMjAwXCIgfSd9XG4gICAgfSk7XG5cbiAgICBhcGkucm9vdC5hZGRNZXRob2QoJ0dFVCcsIHByb3h5c2VydmVyKTtcbiAgICBhcGkucm9vdC5hZGRNZXRob2QoJ1BPU1QnLCBwcm94eXNlcnZlcik7XG4gIH1cbn1cblxuY29uc3QgYXBwID0gbmV3IGNkay5BcHAoKTtcbmNvbnNvbGUubG9nKGNlcnRBUk4pXG5jb25zb2xlLmxvZyhgU1RBQ0tfTkFNRTogXCIkeyBzdGFja1ByZWZpeCB9XCJgKTtcbm5ldyBTRkNDUHJvZHVjdFNlYXJjaFNlcnZlclByb3h5U3RhY2soYXBwLCBzdGFja1ByZWZpeCArICdTZXJ2aWNlJyk7XG5hcHAuc3ludGgoKTtcbiJdfQ==